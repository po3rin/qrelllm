from string import Template


def gen_doc_rel_prompt(query: str) -> str:
    t = Template(
"""
「${query}」という医療系の検索クエリに関係のある記事タイトルと関係のない記事タイトルを10件作成し、
クエリとの関連度を0~2の3段階で付与してください。関連度は0,1,2全て満遍なく出現するようにしてください。
関連度の判断基準は下記になります。

# 適合度判断基準
関連度2: クエリが表現している情報要求を完全に満たすタイトル
例: {{"query": "子供の熱の治し方", "title": "子供に38度の熱が出た。対応方法は?", "reason": "子供の熱の治し方について直接関連している"}}

関連度1: クエリが表現している情報要求の一部のみを満たしているタイトル
例: {{"query": "子供の熱の治し方", "title": "一人で家で熱が出た時の対処法", reason: "熱の治し方について言及しているので一部関連しているが、子供の熱とは関係がない"}}

関連度0: いかなる理由に関してもクエリと全く関係していないタイトル
例: {{"query": "子供の熱の治し方", "title": "カラオケの楽しみ方", reason: "全く関係がない"}}

結果は、以下のようなJSON形式で提出してください。JSONのkeyはquery/title/score/reasonの4つにしてください。
[
    {{"query": "クエリの内容", "title": "クエリと関連のある記事タイトル0", "score": 0, "reason": "理由0"}},
    {{"query": "クエリの内容", "title": "クエリと関連のある記事タイトル1", "score": 1, "reason": "理由1"}},
    {{"query": "クエリの内容", "title": "クエリと関連のある記事タイトル2", "score": 2, "reason": "理由2"}}
]
"""
    )
    return t.substitute(query=query)


def gen_rel_prompt(query: str, docs: list[str]) -> str:
    t = Template(
"""
「${query}」という医療系の検索クエリに対して、下記で挙げた記事タイトルとの関連度を0~2の3段階で付与してください。関連度は0,1,2全て満遍なく出現するようにしてください。

# 記事タイトルのリスト
${docs}

関連度の判断基準は下記になります。

# 適合度判断基準
関連度2: クエリが表現している情報要求を完全に満たすタイトル
例: {{"query": "子供の熱の治し方", "title": "子供に38度の熱が出た。対応方法は?", "reason": "子供の熱の治し方について直接関連している"}}

関連度1: クエリが表現している情報要求の一部のみを満たしているタイトル
例: {{"query": "子供の熱の治し方", "title": "一人で家で熱が出た時の対処法", reason: "熱の治し方について言及しているので一部関連しているが、子供の熱とは関係がない"}}

関連度0: いかなる理由に関してもクエリと全く関係していないタイトル
例: {{"query": "子供の熱の治し方", "title": "カラオケの楽しみ方", reason: "全く関係がない"}}

結果は、以下のようなJSON形式で提出してください。JSONのkeyはquery/title/score/reasonの4つにしてください。
[
    {{"query": "クエリの内容", "title": "記事タイトル0", "score": 0, "reason": "理由0"}},
    {{"query": "クエリの内容", "title": "記事タイトル1", "score": 1, "reason": "理由1"}},
    {{"query": "クエリの内容", "title": "記事タイトル2", "score": 2, "reason": "理由2"}}
]
"""
    )
    return t.substitute(query=query, docs=docs)